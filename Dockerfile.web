# Multi-stage build for Monolith Web Application
# Stage 1: Build the application
FROM rust:1.75-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Set the working directory
WORKDIR /app

# Copy the source code
COPY . .

# Build the application with web and translation features
RUN cargo build --release --features="web,translation"

# Stage 2: Create the runtime image
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

# Create a non-root user
RUN useradd -m -u 1000 monolith

# Set the working directory
WORKDIR /app

# Copy the compiled binary
COPY --from=builder /app/target/release/monolith-web /usr/local/bin/monolith-web
COPY --from=builder /app/target/release/monolith /usr/local/bin/monolith

# Copy templates and static files
COPY --from=builder /app/templates ./templates
COPY --from=builder /app/static ./static

# Copy configuration files
COPY --from=builder /app/translation-config.toml.example ./translation-config.toml

# Create necessary directories
RUN mkdir -p /app/data /app/logs && \
    chown -R monolith:monolith /app

# Switch to non-root user
USER monolith

# Expose the web server port
EXPOSE 7080

# Set environment variables
ENV RUST_LOG=info
ENV BIND_ADDR=0.0.0.0
ENV PORT=7080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:7080/ || exit 1

# Default command
CMD ["monolith-web", "--bind", "0.0.0.0", "--port", "7080"]