# ============================================
# Docker容器化环境配置 (.env.docker)
# ============================================
# 
# 此文件专用于Docker容器化部署
# 适用于Docker Compose、Kubernetes等容器编排环境
# 
# 使用方法：
# 1. Docker Compose: 将此文件重命名为 .env 并放在docker-compose.yml同目录
# 2. Kubernetes: 将配置转换为ConfigMap和Secret
# 3. 单容器部署: 使用 --env-file 参数加载

# 核心配置 - 容器环境
MONOLITH_MODE=production
MONOLITH_LOG_LEVEL=info  # 容器环境使用info级别便于日志收集
# NO_COLOR=1  # 容器环境可能需要彩色日志用于区分

# 翻译配置 - 容器间通信
MONOLITH_TRANSLATION_ENABLED=true
MONOLITH_TRANSLATION_TARGET_LANG=zh
MONOLITH_TRANSLATION_SOURCE_LANG=auto
MONOLITH_TRANSLATION_API_URL=http://deeplx:1188/translate  # 容器服务名

# 容器环境性能配置
MONOLITH_TRANSLATION_MAX_REQUESTS_PER_SECOND=15.0
MONOLITH_TRANSLATION_MAX_CONCURRENT_REQUESTS=20
MONOLITH_TRANSLATION_BATCH_SIZE=10000
MONOLITH_TRANSLATION_BATCH_TIMEOUT=60

# 缓存配置 - 容器环境
MONOLITH_CACHE_ENABLED=true
MONOLITH_CACHE_LOCAL_SIZE=8000
MONOLITH_CACHE_TTL=7200  # 2小时
MONOLITH_CACHE_WARMUP_ENABLED=false  # 容器启动时不预热

# Web服务器 - 容器网络
MONOLITH_WEB_BIND_ADDRESS=0.0.0.0  # 容器内部绑定所有接口
MONOLITH_WEB_PORT=7080
MONOLITH_WEB_STATIC_DIR=/app/static

# MongoDB - 容器服务
MONGODB_URL=mongodb://mongo:27017  # 容器服务名
MONGODB_DATABASE=monolith
MONGODB_COLLECTION=html_cache

# 性能配置 - 容器资源限制
MONOLITH_WORKER_THREADS=4  # 容器通常有固定的CPU限制
MONOLITH_MAX_MEMORY_MB=1024
MONOLITH_PARALLEL_ENABLED=true

# 安全配置 - 容器环境
# MONOLITH_API_KEY=  # 通过Docker Secrets或Kubernetes Secret设置
MONOLITH_CORS_ORIGINS=*  # 容器环境可能需要更灵活的CORS设置

# ============================================
# Docker Compose 示例配置
# ============================================
# 
# services:
#   monolith:
#     image: monolith:latest
#     env_file: .env.docker
#     environment:
#       - MONOLITH_API_KEY=${MONOLITH_API_KEY}  # 从主机环境变量获取
#     ports:
#       - "7080:7080"
#     depends_on:
#       - mongo
#       - deeplx
#     networks:
#       - monolith-network
# 
#   mongo:
#     image: mongo:latest
#     environment:
#       - MONGO_INITDB_DATABASE=monolith
#     volumes:
#       - mongo_data:/data/db
#     networks:
#       - monolith-network
# 
#   deeplx:
#     image: ghcr.io/owo-network/deeplx:latest
#     ports:
#       - "1188:1188"
#     networks:
#       - monolith-network

# ============================================
# Kubernetes ConfigMap 示例
# ============================================
# 
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: monolith-config
# data:
#   MONOLITH_MODE: "production"
#   MONOLITH_LOG_LEVEL: "info"
#   MONOLITH_TRANSLATION_ENABLED: "true"
#   MONOLITH_TRANSLATION_API_URL: "http://deeplx-service:1188/translate"
#   MONOLITH_WEB_BIND_ADDRESS: "0.0.0.0"
#   MONOLITH_WEB_PORT: "7080"
#   MONGODB_URL: "mongodb://mongo-service:27017"
#   MONGODB_DATABASE: "monolith"

# ============================================
# 容器健康检查配置
# ============================================
# 
# 在Dockerfile中添加健康检查：
# HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
#   CMD curl -f http://localhost:7080/health || exit 1
# 
# 或在docker-compose.yml中：
# healthcheck:
#   test: ["CMD", "curl", "-f", "http://localhost:7080/health"]
#   interval: 30s
#   timeout: 10s
#   retries: 3
#   start_period: 60s

# ============================================
# 容器化部署注意事项
# ============================================
# 
# 1. 日志管理：
#    - 使用stdout/stderr输出日志
#    - 配置日志驱动收集日志
#    - 避免在容器内写入日志文件
# 
# 2. 数据持久化：
#    - 静态文件通过Volume挂载
#    - 数据库数据使用持久化卷
#    - 配置文件通过ConfigMap挂载
# 
# 3. 网络配置：
#    - 使用服务名进行容器间通信
#    - 配置适当的网络策略
#    - 考虑使用Service Mesh
# 
# 4. 安全考虑：
#    - 使用非root用户运行
#    - 限制容器权限
#    - 定期更新基础镜像
#    - 使用Secrets管理敏感信息
# 
# 5. 监控和观测：
#    - 配置健康检查
#    - 设置资源限制和请求
#    - 启用监控和指标收集
#    - 配置日志聚合和分析